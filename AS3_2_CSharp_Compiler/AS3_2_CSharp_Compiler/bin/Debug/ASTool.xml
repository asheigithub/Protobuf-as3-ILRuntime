<?xml version="1.0"?>
<doc>
<assembly>
<name>
ASTool
</name>
</assembly>
<members>
<member name="F:ASTool.AS3FileGrammarAnalyser.currentPackage">
 <summary>
 当前在解析的包
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3FileGrammarAnalyser.outpackageprivatescope">
 <summary>
 当前文件的包外代码
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3FileGrammarAnalyser.currentMain">
 <summary>
 当前主类或主接口
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3FileGrammarAnalyser.currentInner">
 <summary>
 当前包外类包外接口
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3FileGrammarAnalyser.MemberScopeStack">
 <summary>
 当前的成员符号表
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3FileGrammarAnalyser.expressionGroup">
 <summary>
 当前表达式编号
 </summary>
</member>
<member name="M:ASTool.AS3FileGrammarAnalyser.getDefTypeStr(ASTool.GrammerExpr)">
 <summary>
 [VariableDEFType] ::= ":" [VariableType]|":*"|null;
 </summary>
 <param name="node"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ASTool.AS3FileGrammarAnalyser.getFuncTypeStr(ASTool.GrammerExpr)">
 <summary>
 [FunctionReturnType] ::=":"[FunctionType]|":*"|null;
 </summary>
 <param name="node"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3ClassInterfaceBase.IsOutPackage">
 <summary>
 是否是包外类
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes.Any">
 <summary>
 *
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes.void">
 <summary>
 void
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes._string">
 <summary>
 String
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes._uint">
 <summary>
 uint
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes.int">
 <summary>
 int
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes.Number">
 <summary>
 Number
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes.Array">
 <summary>
 Array
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes._namespace">
 <summary>
 namespace
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes._Boolean">
 <summary>
 Boolean
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes._Object">
 <summary>
 Object
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes._Function">
 <summary>
 Function
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes.ClassDef">
 <summary>
 Class 的定义
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes.Vector">
 <summary>
 Vector.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes._Class">
 <summary>
 类
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.MemberDataTypes._Interface">
 <summary>
 接口
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.IMemberDataType">
 <summary>
 标记可以作为类型定义
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3MemberDateType">
 <summary>
 成员数据类型 var i:int 中的int
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3E4XFilter">
 <summary>
 XML的过滤 .(@id==XXX)之类
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3Expression">
 <summary>
 AS3表达式
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3For">
 <summary>
 for(;;)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3For.Part2">
 <summary>
 for(;{2};{3})的第2部分
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3For.Part3">
 <summary>
 for(;{2};{3})的第3部分
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3ForEach">
 <summary>
 for each( in )
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3ForEach.ForArg">
 <summary>
 for each  变量部分 可能是AS3Variable 或者 AS3StmtExpressions
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3ForEach.ForExpr">
 <summary>
 for each  表达式值部分
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3ForIn">
 <summary>
 for( in )
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3ForIn.ForArg">
 <summary>
 forin 变量部分 可能是AS3Variable 或者 AS3StmtExpressions
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3ForIn.ForExpr">
 <summary>
 forin 表达式值部分
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Function.IsMethod">
 <summary>
 是否是绑定于类的方法
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Function.IsGet">
 <summary>
 是否是get方法
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Function.IsSet">
 <summary>
 是否是set方法
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Function.Parameters">
 <summary>
 形参
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Function.IsAnonymous">
 <summary>
 是否是匿名函数
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Function.IsConstructor">
 <summary>
 是否是构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3Member">
 <summary>
 AS3成员
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Member.TypeDefine">
 <summary>
 类型定义
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3Meta">
 <summary>
 用[]修饰的东西,是一个表达式
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3NameSpace">
 <summary>
 命名空间
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3Parameter">
 <summary>
 function参数
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Parameter.IsArrPara">
 <summary>
 是否是 ...参数
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3Proj">
 <summary>
 解析出的AS3项目
 </summary>
 <remarks></remarks>
</member>
<member name="M:ASTool.AS3.AS3Proj.Analyse">
 <summary>
 综合分析对象类型等
 </summary>
 <remarks></remarks>
</member>
<member name="M:ASTool.AS3.AS3Proj.FindMemberType(ASTool.AS3.AS3Member,ASTool.AS3.AS3SrcFile,System.Collections.Generic.List{ASTool.AS3.AS3Import})">
 <summary>
 分析对象类型
 </summary>
 <param name="member"></param>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3SrcFile.OutPackagePrivateScope">
 <summary>
 包外程序代码 比如 if trace等
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3StmtExpressions">
 <summary>
 表达式列表
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Try.holdTryId">
 <summary>
 编译时用，保持的tryid
 </summary>
</member>
<member name="T:ASTool.AS3.AS3ProgramElement">
 <summary>
 AS3语法元素 比如类，接口，成员
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3ProgramElement.Meta">
 <summary>
 用[SWF()]这样的东西表示的元属性
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Use.IsDefaultXMLNameSpace">
 <summary>
 是否是 default xml namespace = XXXX
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.AS3Variable">
 <summary>
 AS3变量
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.AS3Vector.isInitData">
 <summary>
 是否构造文法 new &lt;T>[E0, ..., En-1 ,]; 
 </summary>
</member>
<member name="F:ASTool.AS3.Expr.AS3DataStackElement.IsReg">
 <summary>
 是否是寄存器
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.Expr.AS3DataValue">
 <summary>
 AS3表达式值
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.Expr.OpType">
 <summary>
 操作类型
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.Assigning">
 <summary>
 赋值=
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.BitOr">
 <summary>
 位或|
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.BitXor">
 <summary>
 位异或~
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.BitAnd">
 <summary>
 位与
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.LogicEQ">
 <summary>
 逻辑等 ==, ===, !=,!==
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.Logic">
 <summary>
 逻辑大于等于之类 >= ,>,...
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.BitShift">
 <summary>
 位移
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.Plus">
 <summary>
 加减 + -
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.Multiply">
 <summary>
 乘除
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.Unary">
 <summary>
 前置运算符 ++ -- new等
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.Constructor">
 <summary>
 构造类的实例 new
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.Access">
 <summary>
 成员访问 . , [] 
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.E4XAccess">
 <summary>
 e4x 访问
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.E4XFilter">
 <summary>
 e4x过滤 (@id==)之类
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.NameSpaceAccess">
 <summary>
 命名空间访问 ::
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.CallFunc">
 <summary>
 函数调用 (,,,)
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.Suffix">
 <summary>
 后缀 ++,--
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.Flag">
 <summary>
 行标记
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.IF_GotoFlag">
 <summary>
 条件跳转
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.OpType.GotoFlag">
 <summary>
 无条件跳转
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.Expr.AS3ExprStep">
 <summary>
 表达式求值之类
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.Expr.AS3Reg">
 <summary>
 表达式求值用寄存器
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.AS3Reg.ID">
 <summary>
 寄存器号
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3.Expr.AS3Reg.StmtID">
 <summary>
 所属表达式组编号
 </summary>
</member>
<member name="F:ASTool.AS3.Expr.AS3Reg.Value">
 <summary>
 寄存器值
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.AS3.IAS3Stmt">
 <summary>
 AS3语句代码接口 包括成员，赋值等等
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.AS3LexKeywords.LEXKEYWORDS">
 <summary>
 "CONFIG::", "...", "..", "++", "--"....等等
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.Grammar">
 <summary>
 文法
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.Grammar.M">
 <summary>
 预测分析表
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.GrammarLine">
 <summary>
 一行文法 
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarLine.Main">
 <summary>
 左边定义
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarLine.Derivation">
 <summary>
 导出式
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.GrammarNode">
 <summary>
 文法符号
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarNode.GNodeEOF">
 <summary>
 $$
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarNodeType.non_terminal">
 <summary>
 非终结符 
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarNodeType.terminal">
 <summary>
 终结符 如"+" "("
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarNodeType.label">
 <summary>
 检测出的label
 </summary>
</member>
<member name="F:ASTool.GrammarNodeType.this">
 <summary>
 关键字this
 </summary>
</member>
<member name="F:ASTool.GrammarNodeType.super">
 <summary>
 关键字super
 </summary>
</member>
<member name="F:ASTool.GrammarNodeType.number">
 <summary>
 终结符-数字 number
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarNodeType.identifier">
 <summary>
 终结符-标识符 identifier
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarNodeType.conststring">
 <summary>
 终结符-字符串 string
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarNodeType.null">
 <summary>
 终结符-空匹配 null
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarNodeType.whitespace">
 <summary>
 空白符号S 
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarNodeType.eof">
 <summary>
 右端输入结束符 $$
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammarNodeType.wrong">
 <summary>
 错误 wrong
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.GrammerExpr">
 <summary>
 语法树节点
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.GrammerTree">
 <summary>
 语法树
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.GrammerTree.Root">
 <summary>
 根节点
 </summary>
 <remarks></remarks>
</member>
<member name="M:ASTool.GrammerTree.VisitNodes">
 <summary>
 遍历节点
 </summary>
 <remarks></remarks>
</member>
<member name="T:ASTool.Lex">
 <summary>
 分词
 </summary>
 <remarks></remarks>
</member>
<member name="M:ASTool.Lex.isIdStChar(System.String)">
 <summary>
 是否可用作标识符起始的字符
 </summary>
 <param name="ch"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ASTool.My.Resources.Resources">
<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member>
<member name="P:ASTool.My.Resources.Resources.ResourceManager">
<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member>
<member name="P:ASTool.My.Resources.Resources.Culture">
<summary>
  使用此强类型资源类，为所有资源查找
  重写当前线程的 CurrentUICulture 属性。
</summary>
</member>
<member name="P:ASTool.My.Resources.Resources.PG1">
<summary>
  查找类似 /*
&lt;E&gt; ::= &lt;T&gt;&lt;E1&gt; ;
&lt;E1&gt;::= &quot;+&quot; &lt;T&gt; &lt;E1&gt; | null ;
&lt;T&gt; ::= &lt;F&gt;&lt;T1&gt; ;
&lt;T1&gt;::= &quot;*&quot; &lt;F&gt;&lt;T1&gt; |null;
&lt;F&gt; ::=   identifier | number|&quot;(&quot; &lt;E&gt; &quot;)&quot;;
*/

/*
//加上&quot;d&quot;即没有二义性
&lt;S&gt; ::= &quot;i&quot;&lt;E&gt;&quot;t&quot;&lt;S&gt;&lt;S1&gt;&quot;d&quot;  | &quot;a&quot;;
&lt;S1&gt; ::=&quot;e&quot;&lt;S&gt;|null;
&lt;E&gt;  ::=&quot;b&quot;;
*/

/*
&lt;Stmts&gt; ::= &lt;Stmt&gt; &lt;StmtList&gt;;
&lt;StmtList&gt; ::= &lt;Stmts&gt; | null;
&lt;Stmt&gt; ::= &lt;Expression&gt; &lt;ExpEnd&gt;;
&lt;ExpEnd&gt; ::= &quot;;&quot;|null;

&lt;Expression&gt; ::= &lt;Multiply&gt; &lt;PlusOpt&gt;;
&lt;PlusOpt&gt; ::= &quot;+&quot; &lt;Multiply&gt;&lt;PlusOpt&gt; | &quot;-&quot; &lt;Multiply&gt;&lt;PlusOpt&gt; | null;
&lt;Multiply&gt; ::= &lt;Unit&gt; &lt;MultiplyOpt&gt;;
&lt;Multip [字符串的其余部分被截断]&quot;; 的本地化字符串。
</summary>
</member>
<member name="F:ASTool.Token.TokenType.identifier">
 <summary>
 标识符
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.Token.TokenType.label">
 <summary>
 检查出是一个label
 </summary>
</member>
<member name="F:ASTool.Token.TokenType.this_pointer">
 <summary>
 检查出是一个this
 </summary>
</member>
<member name="F:ASTool.Token.TokenType.super_pointer">
 <summary>
 检查出是一个super
 </summary>
</member>
<member name="F:ASTool.Token.TokenType.const_string">
 <summary>
 字符串常量
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.Token.TokenType.const_regexp">
 <summary>
 内嵌正则表达式
 </summary>
</member>
<member name="F:ASTool.Token.TokenType.const_number">
 <summary>
 数值常量
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.Token.TokenType.comments">
 <summary>
 注释
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.Token.TokenType.whitespace">
 <summary>
 空白
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.Token.TokenType.eof">
 <summary>
 文件尾
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.Token.TokenType.other">
 <summary>
 其他
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.Token.TokenEOF">
 <summary>
 结束符
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.Token.StringValue">
 <summary>
 字符串值
 </summary>
 <remarks></remarks>
</member>
<member name="F:ASTool.Token.sourceFile">
 <summary>
 源文件
 </summary>
 <remarks></remarks>
</member>
<member name="M:ASTool.TokenList.Reset">
 <summary>
 指针回零
 </summary>
 <remarks></remarks>
</member>
<member name="P:ASTool.TokenList.CurrentToken">
 <summary>
 获取当前TOKEN
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ASTool.TokenList.GetNextToken">
 <summary>
 移动到下一个非空白非注释的TOKEN并返回
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ASTool.TokenList.GetNextTokenWithWhiteBlank">
 <summary>
 返回下一个符号包括空白
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ASTool.TokenList.SeeToken(System.UInt32)">
 <summary>
 观察后面第M个非空非注释TOKEN
 </summary>
 <param name="addptr"></param>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
